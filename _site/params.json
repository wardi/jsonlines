{"name":"Jsonlines","tagline":"Documentation for the JSON Lines text file format","body":"### JSON Lines: Simple. Like JSON.\r\n\r\nThis page describes the JSON Lines text format. JSON Lines is a convenient format for storing\r\nstructured data that may be processed one record at a time. It works well with unix-style\r\ntext processing tools and shell pipelines.\r\n\r\nJSON Lines files may be saved with the file extension `.jl`.\r\n\r\nStream compressors like `gzip` or `bzip2`\r\nare recommended for saving space, resulting in `.jl.gz` or `.jl.bz2` files.\r\n\r\n### UTF-8 Encoding\r\n\r\nUTF-8 is backwards compatible with ASCII. JSON allows encoding Unicode strings with only ASCII escape sequences, however those escapes are ugly in a text editor.\r\n\r\nChoosing UTF-8 as the standard lets the JSON Lines\r\nauthor choose to escape characters or not. Also, if a file is saved with a different encoding it is very\r\nunlikely to be valid UTF-8, making the mistake quickly obvious.\r\n\r\n### Each Line is a Valid JSON Value\r\n\r\nThe most common values will be objects or arrays, but any of the following is valid:\r\n\r\n* string\r\n* number\r\n* object\r\n* array\r\n* `true`\r\n* `false`\r\n* `null`\r\n\r\nSee <json.org> for more information.\r\n\r\n### Line Separator is `'\\n'`\r\n\r\nThis means `'\\r\\n'` is also supported because white space within lines is ignored, as dictated\r\nby the JSON spec.\r\n\r\nThe last character in the file *may* be a line separator, and it will be treated the same as\r\nif there was no line separator.\r\n\r\n### Count Lines From 1\r\n\r\nText editing programs call the first line of a text file \"line 1\". We also call the first JSON value in a JSON Lines file value 1.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}